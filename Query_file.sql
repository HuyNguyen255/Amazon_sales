--(1)-Query the top 10 products by total sales value. Include product name, total quantity sold, and total sales value
SELECT TOP 10
	Item Product_Name, 
	FORMAT(SUM(Sales_Quantity), 'N0') Quantity,
	FORMAT(SUM((Sales_Quantity * Sales_Price)),'C0') Revenue
FROM Amazon
GROUP BY Item
ORDER BY SUM((Sales_Quantity * Sales_Price)) DESC

-- (2)-Calculate total revenue generated by each product category. Include the percentage contribution of each 
-- categoryto total revenue
SELECT 
	Category, 
	FORMAT(Revenue, 'C0') Revenue, 
	FORMAT(Revenue/(SELECT SUM(Sales_Quantity * Sales_Price) Total_Revenue FROM Amazon), 'P3') 'Contribution(%)'
FROM 
(SELECT 
	Line_Number Category, --Item Product_name, 
	SUM(Sales_Quantity * Sales_Price) Revenue
FROM Amazon
GROUP BY Line_Number) AS Table2
ORDER BY (Revenue/(SELECT SUM(Sales_Quantity * Sales_Price) Total_Revenue FROM Amazon)) DESC

--- (3)-Query monthly total sales over the past year. Display the sales trend, compared to the previous
-- month in the same year
SELECT
	Year, Month, FORMAT(Revenue, 'C0') Current_Revenue, FORMAT(Previous_Month,'C0') Previous_Month,
	FORMAT(ISNULL((Revenue - Previous_Month)/Previous_Month,0), 'P') Sales_Trend
FROM 
(SELECT
	Year, Month, Revenue,
	LAG(Revenue) OVER ( PARTITION BY Year ORDER BY Year ASC, Month ASC) Previous_Month
FROM 
(SELECT 
	YEAR(DateKey) Year, MONTH(DateKey) Month,
	SUM(Sales_Price * Sales_Quantity) Revenue
FROM Amazon
GROUP BY YEAR(DateKey), MONTH(DateKey)) AS Table1) AS Table2

--- (4)-Identify the best-selling product for each category. Include the total sales for that category
WITH Table3 AS
(SELECT 
	Line_Number, FORMAT(SUM(Revenue),'C0') Total_Revenue
FROM
(SELECT Line_Number ,Item Product_name, SUM(Sales_Price * Sales_Quantity) Revenue  
FROM Amazon
GROUP BY Line_Number, Item) AS Table2
GROUP BY Line_Number),
Table4 AS
(SELECT
	Line_Number, Product_name, FORMAT(Revenue, 'C0') Revenue
FROM 
(SELECT 
	 Line_Number, Item Product_name, 
	 SUM(Sales_Price * Sales_Quantity) Revenue,
	 RANK() OVER (PARTITION BY Line_Number ORDER BY SUM(Sales_Price * Sales_Quantity) DESC) Rank
FROM Amazon 
GROUP BY Item, Line_Number, Sales_Price, Sales_Quantity) AS Table1
WHERE Rank = 1)
-------
SELECT
	T4.Line_Number, Product_name, Revenue, Total_Revenue
FROM Table3 as T3 
JOIN Table4 as T4 ON T3.Line_Number = T4.Line_Number

-- (5)- Compute the average order value for each customer. Include only customers with more than 20 orders.
-- And find the median value of the order

WITH Table1 as
(SELECT 
	Custkey Customer
FROM Amazon
GROUP BY Custkey
HAVING COUNT(Invoice_Number) > 20),
Table2 as  
(		-- Create subtale to made index number column
	SELECT 
		ROW_NUMBER() OVER (ORDER BY Avg_Order_value DESC) Row_num,
		Customer, Avg_Order_value
	FROM 
		(SELECT 
			Custkey Customer, 
			CAST(AVG(Sales_Price * Sales_Quantity) AS Decimal(10,2)) Avg_Order_value
		FROM Amazon
		WHERE Custkey in (SELECT * FROM table1)
		GROUP BY Custkey) as Table3
),
Median_table as
	(SELECT 
		COUNT(*) Number_order,
		CASE
			WHEN COUNT(*) % 2 = 0 THEN COUNT(*)/2
			ELSE (COUNT(*)+1) / 2
		END Median_value1,
		CASE
			WHEN COUNT(*) % 2 = 0 THEN (COUNT(*)+2)/2
			ELSE (COUNT(*)+1) / 2
		END Median_value2
	FROM Table2)
-- Find the median value
SELECT
	FORMAT(AVG(Avg_order_value), 'C2') Median_value_of_Order
FROM 
(SELECT 
	Row_num,
	Customer,
	Avg_order_value
FROM Table2 as t2 
JOIN Median_table as mt ON mt.Median_value1 = t2.Row_num OR mt.Median_value2 = t2.Row_num) as Result

--- (6)- Find the top 10 sellers ID based on total sales value. And display their percentage sales for 
-- total sales of Sales_Rep
WITH Sale_Total AS
(SELECT 
	SUM(Sales_Price * Sales_Quantity) Total_Revenue
FROM Amazon),
Sales as
(SELECT
	 Sales_Rep Seller, 
	 FORMAT(SUM(Sales_Price * Sales_Quantity),'C0') Revenue,
	 SUM(Sales_Price * Sales_Quantity) Sales_Value
FROM Amazon
GROUP BY Sales_Rep)
-----
SELECT TOP 10
	Seller, Revenue, 
	FORMAT((Sales_Value/(SELECT*FROM Sale_Total)),'P2') '%Contribution'
FROM Sales
ORDER BY Sales_Value DESC

--- (7)- Determine products with have Deceasing revenue ratio compare to last_year(2018) and current_year(2019)
-- Return  product_name, 2018 revenue and 2019 revenue
-- Note: Change(%)= cr-ls/ls* 100

WITH Table1 AS
(SELECT 
	YEAR(Datekey) Year, Item Product,
	SUM(Sales_Price * Sales_Quantity) Total_Revenue
FROM Amazon
WHERE YEAR(Datekey) BETWEEN 2018 and 2019
GROUP BY Item, YEAR(Datekey)
)

SELECT 
	Product, [Year-2019] , 
	FORMAT( [Revenue-2019], 'C0') '2019-Revenue', FORMAT([Revenue-2018], 'C0') '2018-Revenue',
	[%Change]
FROM 
(SELECT 
	cur.Product Product,
	pre.Year 'Year-2018', pre.Total_Revenue 'Revenue-2018',
	cur.Year 'Year-2019', cur.Total_Revenue 'Revenue-2019',
	FORMAT( (cur.Total_Revenue - pre.Total_Revenue)/ CAST(pre.Total_Revenue as decimal(10,2)), 'P2') '%Change',
	( cur.Total_Revenue - pre.Total_Revenue )/ CAST(pre.Total_Revenue as decimal(10,2)) To_order

FROM Table1 as cur 
JOIN Table1 as pre ON pre.Year = cur.Year - 1 AND pre.Product = cur.Product) AS Final_table
WHERE to_order < 0
ORDER BY To_order ASC, Product ASC

